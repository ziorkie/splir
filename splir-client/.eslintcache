[{"D:\\splir\\splir-client\\src\\index.js":"1","D:\\splir\\splir-client\\src\\App.js":"2","D:\\splir\\splir-client\\src\\reportWebVitals.js":"3","D:\\splir\\splir-client\\src\\components\\User.js":"4","D:\\splir\\splir-client\\src\\components\\Login.js":"5","D:\\splir\\splir-client\\src\\components\\BoardUser.js":"6","D:\\splir\\splir-client\\src\\components\\Profile.js":"7","D:\\splir\\splir-client\\src\\components\\Register.js":"8","D:\\splir\\splir-client\\src\\services\\auth-service.js":"9","D:\\splir\\splir-client\\src\\components\\Home.js":"10","D:\\splir\\splir-client\\src\\services\\user-service.js":"11","D:\\splir\\splir-client\\src\\services\\auth-header.js":"12","D:\\splir\\splir-client\\src\\services\\invitation-service.js":"13","D:\\splir\\splir-client\\src\\components\\InviteModal.js":"14","D:\\splir\\splir-client\\src\\components\\Rooms.js":"15","D:\\splir\\splir-client\\src\\services\\rooms-service.js":"16","D:\\splir\\splir-client\\src\\components\\Room.js":"17","D:\\splir\\splir-client\\src\\components\\Friends.js":"18","D:\\splir\\splir-client\\src\\services\\friends-service.js":"19","D:\\splir\\splir-client\\src\\components\\FriendsAndInvites.js":"20","D:\\splir\\splir-client\\src\\components\\Invites.js":"21","D:\\splir\\splir-client\\src\\components\\GroupExpenseModal.js":"22","D:\\splir\\splir-client\\src\\components\\RoomAddUserModal.js":"23","D:\\splir\\splir-client\\src\\components\\CreateRoomModal.js":"24","D:\\splir\\splir-client\\src\\components\\Notifications.js":"25","D:\\splir\\splir-client\\src\\services\\notifications-service.js":"26","D:\\splir\\splir-client\\src\\components\\NotificationsSent.js":"27","D:\\splir\\splir-client\\src\\components\\NotificationsReceived.js":"28","D:\\splir\\splir-client\\src\\services\\solo-service.js":"29","D:\\splir\\splir-client\\src\\components\\SoloExpenseModal.js":"30"},{"size":380,"mtime":1611856578920,"results":"31","hashOfConfig":"32"},{"size":5140,"mtime":1612959330273,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"32"},{"size":1223,"mtime":1611856578642,"results":"35","hashOfConfig":"32"},{"size":4223,"mtime":1611856578950,"results":"36","hashOfConfig":"32"},{"size":1056,"mtime":1611856578894,"results":"37","hashOfConfig":"32"},{"size":853,"mtime":1610477084896,"results":"38","hashOfConfig":"32"},{"size":9185,"mtime":1611856578943,"results":"39","hashOfConfig":"32"},{"size":1001,"mtime":1611917033147,"results":"40","hashOfConfig":"32"},{"size":2328,"mtime":1612023178028,"results":"41","hashOfConfig":"32"},{"size":1169,"mtime":1611917032988,"results":"42","hashOfConfig":"32"},{"size":246,"mtime":1610389203396,"results":"43","hashOfConfig":"32"},{"size":891,"mtime":1611917033040,"results":"44","hashOfConfig":"32"},{"size":6513,"mtime":1611856578889,"results":"45","hashOfConfig":"32"},{"size":2857,"mtime":1611856578743,"results":"46","hashOfConfig":"32"},{"size":1558,"mtime":1611917033001,"results":"47","hashOfConfig":"32"},{"size":6219,"mtime":1611919465545,"results":"48","hashOfConfig":"32"},{"size":2364,"mtime":1611856578752,"results":"49","hashOfConfig":"32"},{"size":533,"mtime":1611917033083,"results":"50","hashOfConfig":"32"},{"size":1104,"mtime":1611856578762,"results":"51","hashOfConfig":"32"},{"size":3145,"mtime":1611856578964,"results":"52","hashOfConfig":"32"},{"size":7286,"mtime":1611920557193,"results":"53","hashOfConfig":"32"},{"size":6659,"mtime":1611919577374,"results":"54","hashOfConfig":"32"},{"size":6378,"mtime":1612959305446,"results":"55","hashOfConfig":"32"},{"size":1168,"mtime":1611856578668,"results":"56","hashOfConfig":"32"},{"size":810,"mtime":1611917033130,"results":"57","hashOfConfig":"32"},{"size":2559,"mtime":1611856578675,"results":"58","hashOfConfig":"32"},{"size":3464,"mtime":1611923627661,"results":"59","hashOfConfig":"32"},{"size":532,"mtime":1611917033126,"results":"60","hashOfConfig":"32"},{"size":9216,"mtime":1611924937127,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"9e6pvb",{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"64"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"64"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"64"},"D:\\splir\\splir-client\\src\\index.js",[],["142","143"],"D:\\splir\\splir-client\\src\\App.js",["144"],"D:\\splir\\splir-client\\src\\reportWebVitals.js",[],"D:\\splir\\splir-client\\src\\components\\User.js",["145","146"],"import * as React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport {DataGrid} from '@material-ui/data-grid';\r\nimport axios from \"axios\";\r\n\r\n\r\nconst User=()=>{\r\n\r\n    const[user,setUser] = useState([]);\r\n    const[userr,setUserr] = useState({});\r\n    // const rows = [\r\n    //     {\r\n    //         id: user[0].name,\r\n    //         username: 'defunkt',\r\n    //         age: 38,\r\n    //     },\r\n    // ];\r\n\r\n    function f() {\r\n        axios.get('http://localhost:8080/user/getall')\r\n            .then(res=>{\r\n            setUser(res.data)\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        f();\r\n    },[]);\r\n\r\n    return (\r\n        <div style={{ height: 250, width: '100%' }}>\r\n\r\n            <DataGrid\r\n\r\n                columns={[\r\n                    { field: 'id' },\r\n                    { field: 'username', width: 200 },\r\n                    { field: 'name' },\r\n                ]}\r\n                rows={user.map(usr=>(\r\n                    {\r\n                        id:usr.id,\r\n                        username:usr.username,\r\n                        name:usr.name,\r\n                    }\r\n                )\r\n                )}\r\n\r\n\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","D:\\splir\\splir-client\\src\\components\\Login.js",[],"D:\\splir\\splir-client\\src\\components\\BoardUser.js",["147"],"import React, {useEffect, useState} from \"react\";\r\n\r\nimport UserService from \"../services/user-service\";\r\n\r\nconst BoardUser = () => {\r\n    const [content, setContent] = useState({});\r\n\r\n    useEffect(() => {\r\n        UserService.getUserBoard().then(\r\n            response => {\r\n                setContent(response.data);\r\n                return content;\r\n            },\r\n            (error) => {\r\n                const _content =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setContent(_content);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <header className=\"jumbotron\">\r\n                <h3>Id: {content.id}</h3>\r\n                <h3>Name: {content.name}</h3>\r\n                <h3>Username: {content.username}</h3>\r\n\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardUser;","D:\\splir\\splir-client\\src\\components\\Profile.js",[],"D:\\splir\\splir-client\\src\\components\\Register.js",[],"D:\\splir\\splir-client\\src\\services\\auth-service.js",["148"],"import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080/auth/\";\r\n\r\nconst register = (username, password, email, name, surname, phoneNumber, accountNumber) => {\r\n    return axios.post(API_URL + \"signup\", {\r\n        username,\r\n        password,\r\n        email,\r\n        name,\r\n        surname,\r\n        phoneNumber,\r\n        accountNumber\r\n    });\r\n};\r\n\r\nconst login = (usernameOrEmail, password) => {\r\n    return axios\r\n        .post(API_URL + \"signin\", {\r\n            usernameOrEmail,\r\n            password,\r\n        })\r\n        .then((response) => {\r\n            if (response.data.accessToken) {\r\n                localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n            }\r\n\r\n            return response.data;\r\n        });\r\n};\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n};","D:\\splir\\splir-client\\src\\components\\Home.js",[],"D:\\splir\\splir-client\\src\\services\\user-service.js",["149"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/user/\";\r\n\r\nconst getPublicContent = () => {\r\n    return axios.get(API_URL + \"getall\");\r\n};\r\n\r\nconst getUserBoard = () => {\r\n    return axios.get(API_URL + \"me\", { headers: authHeader() });\r\n};\r\n\r\nconst getModeratorBoard = () => {\r\n    return axios.get(API_URL + \"mod\", { headers: authHeader() });\r\n};\r\n\r\nconst getAdminBoard = () => {\r\n    return axios.get(API_URL + \"admin\", { headers: authHeader() });\r\n};\r\n\r\nconst getUserDetails = (userId) => {\r\n    return axios.post(API_URL + \"userdetails\", {\r\n        userId:userId\r\n    },{headers: authHeader()});\r\n};\r\n\r\n// const getPaymentDetails = (userId) => {\r\n//      return axios.post(API_URL + \"paymentdetails\", {\r\n//         userId\r\n//     },{headers: authHeader()});\r\n// };\r\n\r\nconst getPaymentDetails = (userId) => {\r\n    return axios.post(\r\n        API_URL + \"paymentdetails\",\r\n        { userId:userId },\r\n        { headers: authHeader() }\r\n    );\r\n};\r\n\r\n\r\nexport default {\r\n    getPublicContent,\r\n    getUserBoard,\r\n    getModeratorBoard,\r\n    getAdminBoard,\r\n    getUserDetails,\r\n    getPaymentDetails,\r\n\r\n};","D:\\splir\\splir-client\\src\\services\\auth-header.js",[],"D:\\splir\\splir-client\\src\\services\\invitation-service.js",["150"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/invitations/\";\r\n\r\nconst sendInvite = (userId) => {\r\n    return axios.post(API_URL + \"send\", {\r\n        userId\r\n    },{headers: authHeader()});\r\n};\r\n\r\nconst mySentInvites = () => {\r\n    return axios.get(API_URL + \"mysentinvites\", {headers: authHeader()});\r\n};\r\n\r\nconst myReceivedInvites = () => {\r\n    return axios.get(API_URL + \"myreceivedinvites\", {headers: authHeader()});\r\n};\r\n\r\nconst deleteInvite = (userId) => {\r\n    return axios.post(API_URL + \"delete\", {\r\n        userId\r\n    },{headers: authHeader()});\r\n};\r\n\r\nconst acceptInvite = (userId) => {\r\n    return axios.post(API_URL + \"accept\", {\r\n        userId\r\n    },{headers: authHeader()});\r\n};\r\n\r\n\r\n\r\n\r\nexport default {\r\n    sendInvite,\r\n    mySentInvites,\r\n    myReceivedInvites,\r\n    deleteInvite,\r\n    acceptInvite,\r\n\r\n};","D:\\splir\\splir-client\\src\\components\\InviteModal.js",["151","152"],"import React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {animated, useSpring} from 'react-spring'\r\nimport styled from 'styled-components'\r\nimport {MdClose} from \"react-icons/all\";\r\nimport Input from \"react-validation/build/input\";\r\nimport Form from \"react-validation/build/form\";\r\n\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport InvitationService from \"../services/invitation-service\"\r\n\r\nconst Background = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0,0 0, 0.8);\r\n    position: fixed;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 1;\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n    width: 300px;\r\n    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\r\n    background: #fff;\r\n    color: #000;\r\n    z-index: 1;\r\n    border-radius: 10px;\r\n`\r\n\r\n\r\n\r\nconst ModalImg = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 10px 0 0 10px;\r\n    background: #000;\r\n    z-index: 1;\r\n\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  line-height: 1.8;\r\n  z-index: 1;\r\n  color: #141414;\r\n  p {\r\n    margin-bottom: 1rem;\r\n  }\r\n  label{\r\n      width: 100%;\r\n    text-align: center;\r\n  }\r\n  button {\r\n    padding: 10px 24px;\r\n    background: #141414;\r\n    color: #fff;\r\n    border: none;\r\n  }\r\n`;\r\nconst Form1 = styled(Form)`\r\n    width:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst label = styled.label`\r\n    width: 100%;\r\n    text-align: center;\r\n`\r\n\r\n\r\nconst CloseModalButton = styled(MdClose)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 1;\r\n`;\r\n\r\n\r\n\r\n\r\nexport const InviteModal = ({showModal, setShowModal}) =>{\r\n    const modalRef = useRef()\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeUserId = (e) => {\r\n        const userId = e.target.value;\r\n        setUserId(userId);\r\n    };\r\n\r\n    const animation = useSpring({\r\n        config:{\r\n            duration:250\r\n        },\r\n        opacity: showModal ? 1 : 0,\r\n        transform: showModal ? `translateY(0%)` : `translateY(-100%`,\r\n        position:\"fixed\",\r\n        top:0,\r\n    })\r\n\r\n\r\n    const closeModal= e => {\r\n        if(modalRef.current === e.target){\r\n            setShowModal(false)\r\n        }\r\n    }\r\n\r\n    const keyPress = useCallback(\r\n        e => {\r\n            if (e.key === 'Escape' && showModal) {\r\n                setShowModal(false);\r\n            }\r\n        },\r\n        [setShowModal, showModal]\r\n    )\r\n\r\n    const handleInvitationSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            InvitationService.sendInvite(userId).then(\r\n                () => {\r\n                    // props.history.push(\"/profile\");\r\n                    window.location.reload();\r\n                },\r\n                (error) => {\r\n                    const resMessage =\r\n                        (error.response &&\r\n                            error.response.data &&\r\n                            error.response.data.message) ||\r\n                        error.message ||\r\n                        error.toString();\r\n\r\n                    setLoading(false);\r\n                    setMessage(resMessage);\r\n                }\r\n            );\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(\r\n        () => {\r\n            document.addEventListener('keydown', keyPress);\r\n            return () => document.removeEventListener('keydown', keyPress);\r\n        },\r\n        [keyPress]\r\n    );\r\n\r\n    return(\r\n        <>\r\n            {showModal ? (\r\n                <Background ref={modalRef} onClick={closeModal}>\r\n                    <animated.div style={animation}>\r\n                    <ModalWrapper showModal={showModal}>\r\n                        {/*<ModalImg src={require('../public/modal.jpg')}*/}\r\n                        {/*          alt='image'/>*/}\r\n                        <ModalContent>\r\n                            <p>SEND INVITE TO USER</p>\r\n\r\n                            <Form onSubmit={handleInvitationSubmit} ref={form}>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"userId\">nickname</label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        name=\"userId\"\r\n                                        value={userId}\r\n                                        onChange={onChangeUserId}\r\n                                        // validations={[required]}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n                                        {loading && (\r\n                                            <span className=\"spinner-border spinner-border-sm\"/>\r\n                                        )}\r\n                                        <span>Send invite</span>\r\n                                    </button>\r\n                                </div>\r\n\r\n                                {message && (\r\n                                    <div className=\"form-group\">\r\n                                        <div className=\"alert alert-danger\" role=\"alert\">\r\n                                            {message}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                            </Form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </ModalContent>\r\n                        <CloseModalButton aria-label='Close modal' onClick={() => setShowModal(prev => !prev)}/>\r\n                    </ModalWrapper>\r\n                    </animated.div>\r\n                </Background>\r\n            ) : null}\r\n        </>\r\n    )\r\n}","D:\\splir\\splir-client\\src\\components\\Rooms.js",["153","154","155","156","157"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport UserService from \"../services/user-service\";\r\nimport RoomsService from \"../services/rooms-service\";\r\nimport {CreateRoomModal} from \"./CreateRoomModal\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\n// export default function SimpleList() {\r\n//     const classes = useStyles();}\r\n\r\nconst Rooms = () => {\r\n    const [content, setContent] = useState([]);\r\n    const [showCreateRoomModal, setShowCreateRoomModal] = useState(false);\r\n    const [details, setDetails] = useState(\"\");\r\n\r\n    const getUserDetails = async (id) => {\r\n        const details = await UserService.getUserDetails(id);\r\n        return details.data.username;\r\n    }\r\n\r\n\r\n    const openCreateRoomModal = () =>{\r\n        setShowCreateRoomModal(prev => !prev)\r\n    }\r\n\r\n    useEffect(() => {\r\n        RoomsService.getRooms().then(\r\n            (response) => {\r\n                setContent(response.data);\r\n            },\r\n            (error) => {\r\n                const _content =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setContent(_content);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    const Button = styled.button`\r\n    min-width: 100px;\r\n    padding: 0.3em;\r\n    border-radius: 4px;\r\n    border:none;\r\n    background: #141414;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    `\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <header className=\"jumbotron\">\r\n                <Button onClick={openCreateRoomModal}>create room</Button>\r\n                <CreateRoomModal showModal={showCreateRoomModal}\r\n                                   setShowModal={setShowCreateRoomModal}/>\r\n                {content.map(con=>(\r\n                    <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n                        <ListItem button component={Link} to={{pathname:\"/room\", state:{con}}} >\r\n                            <ListItemText primary={con.name} secondary={\"Total amount: \" +con.totalExpense+ \" zł\"}/>\r\n                        </ListItem>\r\n                    </List>\r\n                )\r\n            )}\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rooms;","D:\\splir\\splir-client\\src\\services\\rooms-service.js",["158","159"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/rooms/\";\r\n\r\nconst getRooms = () => {\r\n    return axios.get(API_URL + \"getrooms\", { headers: authHeader() });\r\n};\r\n\r\nconst createRoom = (name) => {\r\n    return axios.post(API_URL + \"create\", {\r\n        name\r\n    },{headers: authHeader()});\r\n};\r\n\r\nconst closeRoom = (roomId) => {\r\n    return axios.post(API_URL + \"close\", {\r\n        roomId\r\n    },{headers: authHeader()});\r\n};\r\n\r\n\r\nconst getUserBoard = () => {\r\n    return axios.get(API_URL + \"user\", { headers: authHeader() });\r\n};\r\n\r\nconst getRoomExpenses = (roomId) => {\r\n    return axios.post(API_URL + \"roomexpenses\", {\r\n        roomId\r\n    },{headers: authHeader()});\r\n};\r\n\r\nconst getExpensePerUser = (roomId) => {\r\n    return axios.post(API_URL + \"getexpenseperuser\", {\r\n        roomId\r\n    },{headers: authHeader()});\r\n};\r\nconst getRoomUsers = (roomId) => {\r\n    return axios.post(API_URL + \"getroomusers\", {\r\n        roomId\r\n    },{headers: authHeader()});\r\n};\r\n\r\n\r\nconst addUserToRoom = (userId, roomId) => {\r\n    return axios.post(API_URL + \"adduser\", {\r\n        userId,\r\n        roomId\r\n    },{headers: authHeader()});\r\n};\r\n\r\n\r\n\r\nconst addRoomExpense = (name, value, roomId) =>{\r\n    return axios.post(API_URL + \"addexpense\", {\r\n        name,\r\n        value,\r\n        roomId\r\n    },{headers: authHeader()});\r\n};\r\n\r\nexport default {\r\n    getRooms,\r\n    createRoom,\r\n    closeRoom,\r\n    getRoomExpenses,\r\n    addRoomExpense,\r\n    getExpensePerUser,\r\n    addUserToRoom,\r\n    getRoomUsers\r\n};","D:\\splir\\splir-client\\src\\components\\Room.js",["160","161","162","163","164","165","166","167"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nimport UserService from \"../services/user-service\";\r\nimport RoomsService from \"../services/rooms-service\";\r\nimport {DataGrid} from \"@material-ui/data-grid\";\r\nimport {GroupExpenseModal} from \"./GroupExpenseModal\";\r\nimport {RoomAddUserModal} from \"./RoomAddUserModal\"\r\nimport {User} from \"./User\"\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"))\r\n}\r\n\r\nfunction f() {\r\n    return axios.get('http://localhost:8080/user/getall')\r\n\r\n}\r\n\r\nfunction ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\n// export default function SimpleList() {\r\n//     const classes = useStyles();}\r\n\r\nconst Room = (props) => {\r\n    const [content, setContent] = useState([]);\r\n    const [expenses, setExpenses]= useState([]);\r\n    const [roomUsers, setRoomUsers] = useState([]);\r\n\r\n    const [showGroupExpenseModal, setShowGroupExpenseModal] = useState(false);\r\n    const [showRoomAddUserModal, setShowRoomAddUserModal] = useState(false);\r\n    const [averageExpense, setAverageExpense] = useState(\"\");\r\n    const [totalExpense, setTotalExpense] = useState(\"\");\r\n    const [currentUser, setCurrentUser] = useState({});\r\n\r\n    const openGroupExpenseModal = () =>{\r\n        setShowGroupExpenseModal(prev => !prev)\r\n    }\r\n    const openRoomAddUserModal = () =>{\r\n        setShowRoomAddUserModal(prev => !prev)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setContent(props.location.state.con)\r\n        RoomsService.getRoomExpenses(props.location.state.con.id).then(\r\n            (response) => {\r\n                console.table(response.data)\r\n                setExpenses(response.data);\r\n\r\n            },\r\n            (error) => {\r\n                const _expenses =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setExpenses(_expenses);\r\n            }\r\n        );\r\n\r\n        RoomsService.getExpensePerUser(props.location.state.con.id).then(\r\n            (response) => {\r\n                setAverageExpense(response.data);\r\n            },\r\n            (error) => {\r\n                const _averageExpense =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setAverageExpense(_averageExpense);\r\n            }\r\n        );\r\n\r\n        RoomsService.getRoomUsers(props.location.state.con.id).then(\r\n            (response) => {\r\n                setRoomUsers(response.data);\r\n            },\r\n            (error) => {\r\n                const _roomUsers =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setRoomUsers(_roomUsers);\r\n            }\r\n        );\r\n\r\n        UserService.getUserBoard().then(\r\n            response => {\r\n                setCurrentUser(response.data);\r\n                return currentUser;\r\n            },\r\n            (error) => {\r\n                const _currentUser =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setContent(_currentUser);\r\n            }\r\n        );\r\n\r\n\r\n\r\n    }, []);\r\n\r\n    const Button = styled.button`\r\n    min-width: 100px;\r\n    padding: 0.3em;\r\n    border-radius: 4px;\r\n    border:none;\r\n    background: #141414;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    `\r\n\r\n\r\n    return (\r\n        <div className=\"col-md-12\">\r\n\r\n        <div className=\"container\" style={{display:'grid',  'grid-template-columns': '1fr 1fr' }}>\r\n            <div className=\"jumbotron\">\r\n                <h3>ROOM:{content.name}</h3>\r\n                <h2>Expense per user:{(averageExpense*1).toFixed(2)}</h2>\r\n\r\n                <Button onClick={openGroupExpenseModal}>Add expense</Button>\r\n                <GroupExpenseModal showModal={showGroupExpenseModal}\r\n                                   setShowModal={setShowGroupExpenseModal}\r\n                                   roomId={props.location.state.con.id}/>\r\n\r\n                <Button onClick={openRoomAddUserModal}>Add user</Button>\r\n                <RoomAddUserModal showModal={showRoomAddUserModal}\r\n                                  setShowModal={setShowRoomAddUserModal}\r\n                                  roomId={props.location.state.con.id}/>\r\n\r\n\r\n                {props.location.state.con.administratorId === currentUser.id ? (\r\n                    <div>\r\n                        <Button onClick={()=>\r\n                        {RoomsService.closeRoom(props.location.state.con.id)\r\n                        window.location.href=\"/rooms\"}}>Close room</Button>\r\n\r\n                    </div>\r\n\r\n                ):(null) }\r\n\r\n            </div>\r\n            <div><h1>Room users:</h1>{roomUsers.map(usr=>(<h1>{usr.username}</h1>))}</div>\r\n\r\n            <div style={{ height: 600, width: '100%', 'grid-column': '1/3' }}>\r\n            <DataGrid\r\n                columns={[{ field: 'userId', width:100 }, {field: 'expenseName', width:300}, {field: 'expenseValue', width:300}]}\r\n                rows={expenses.map(exp=>({\r\n                    id: exp.id,\r\n                    userId: exp.userId,\r\n                    expenseName: exp.expenseName,\r\n                    expenseValue: exp.expenseValue\r\n                }))\r\n\r\n                }\r\n\r\n            />\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;","D:\\splir\\splir-client\\src\\components\\Friends.js",["168","169"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport FriendsService from \"../services/friends-service\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\n// export default function SimpleList() {\r\n//     const classes = useStyles();}\r\n\r\nconst Friends = () => {\r\n    const [content, setContent] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        FriendsService.getFriends().then(\r\n            (response) => {\r\n                setContent(response.data);\r\n            },\r\n            (error) => {\r\n                const _content =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setContent(_content);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n\r\n    const Button = styled.button`\r\n    min-width: 100px;\r\n    padding: 0.3em;\r\n    border-radius: 4px;\r\n    border:none;\r\n    background: #141414;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    `\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n\r\n\r\n            <header className=\"flex-box\">\r\n                <h1>Your friends:</h1>\r\n                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n                    {content.map((con)=>(\r\n                            <ListItem>\r\n                                <ListItemText primary={con.username}/>\r\n                                <Button onClick={()=>{FriendsService.deleteFriend(con.userId)\r\n                                    setContent(content.filter(obj=>obj.userId !==con.userId))\r\n                                }\r\n                                }>DELETE</Button>\r\n                            </ListItem>\r\n                        )\r\n                    )}\r\n                </List>\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Friends;","D:\\splir\\splir-client\\src\\services\\friends-service.js",["170","171"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/friendship/\";\r\n\r\nconst getFriends = () => {\r\n    return axios.get(API_URL + \"myfriendships\", { headers: authHeader() });\r\n};\r\n\r\nconst deleteFriend = (userId) => {\r\n    return axios.post(API_URL + \"delete\", {\r\n        userId\r\n    },{headers: authHeader()});\r\n};\r\n\r\nconst getUserBoard = () => {\r\n    return axios.get(API_URL + \"user\", { headers: authHeader() });\r\n};\r\n\r\nexport default {\r\n    getFriends,\r\n    deleteFriend\r\n};","D:\\splir\\splir-client\\src\\components\\FriendsAndInvites.js",[],"D:\\splir\\splir-client\\src\\components\\Invites.js",["172","173","174","175"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InvitationService from \"../services/invitation-service\"\r\nimport {InviteModal} from \"./InviteModal\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\n// export default function SimpleList() {\r\n//     const classes = useStyles();}\r\n\r\nconst Friends = () => {\r\n    const [content, setContent] = useState([]);\r\n    const [receivedInvites, setReceivedInvites] = useState([]);\r\n\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const openModal = () =>{\r\n        setShowModal(prev => !prev)\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        InvitationService.myReceivedInvites().then(\r\n            (response) => {\r\n                setReceivedInvites(response.data);\r\n            },\r\n            (error) => {\r\n                const _content =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setReceivedInvites(_content);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    const Button = styled.button`\r\n    min-width: 100px;\r\n    padding: 0.3em;\r\n    border-radius: 4px;\r\n    border:none;\r\n    background: #141414;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    `\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n                <Button onClick={openModal}>send invite</Button>\r\n                <InviteModal showModal={showModal}\r\n                             setShowModal={setShowModal}/>\r\n\r\n            <header className=\"flex-box\">\r\n                <h1>Pending invites:</h1>\r\n                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n                    {receivedInvites.map((rec)=>(\r\n                            <ListItem>\r\n                                <ListItemText primary={rec.username}/>\r\n                                <Button onClick={()=>{InvitationService.acceptInvite(rec.userId)\r\n                                setReceivedInvites(receivedInvites.filter(obj=>obj.userId !==rec.userId))\r\n                                }\r\n\r\n                                }>ACCEPT</Button>\r\n                                <Button onClick={()=>{InvitationService.deleteInvite(rec.userId)\r\n                                    setReceivedInvites(receivedInvites.filter(obj=>obj.userId !==rec.userId))\r\n                                }\r\n\r\n                                }>REJECT</Button>\r\n                            </ListItem>\r\n\r\n                        )\r\n                    )}\r\n                </List>\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Friends;","D:\\splir\\splir-client\\src\\components\\GroupExpenseModal.js",["176"],"import React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {animated, useSpring} from 'react-spring'\r\nimport styled from 'styled-components'\r\nimport {MdClose} from \"react-icons/all\";\r\nimport Input from \"react-validation/build/input\";\r\nimport Form from \"react-validation/build/form\";\r\n\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport RoomsService from \"../services/rooms-service\"\r\n\r\nconst Background = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0,0 0, 0.8);\r\n    position: fixed;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 1;\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n    width: 300px;\r\n    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\r\n    background: #fff;\r\n    color: #000;\r\n    z-index: 1;\r\n    border-radius: 10px;\r\n`\r\n\r\n\r\n\r\nconst ModalImg = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 10px 0 0 10px;\r\n    background: #000;\r\n    z-index: 1;\r\n\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  line-height: 1.8;\r\n  z-index: 1;\r\n  color: #141414;\r\n  p {\r\n    margin-bottom: 1rem;\r\n  }\r\n  label{\r\n      width: 100%;\r\n    text-align: center;\r\n  }\r\n  button {\r\n    padding: 10px 24px;\r\n    background: #141414;\r\n    color: #fff;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst CloseModalButton = styled(MdClose)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\n\r\n\r\nexport const GroupExpenseModal = ({showModal, setShowModal, roomId}) =>{\r\n    const modalRef = useRef()\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [expenseName, setExpenseName] = useState(\"\");\r\n    const [expenseValue, setExpenseValue] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const onChangeExpenseName = (e) => {\r\n        const expenseName = e.target.value;\r\n        setExpenseName(expenseName);\r\n    };\r\n\r\n    const onChangeExpenseValue = (e) => {\r\n        const expenseValue = e.target.value;\r\n        setExpenseValue(expenseValue);\r\n    };\r\n\r\n    const animation = useSpring({\r\n        config:{\r\n            duration:250\r\n        },\r\n        opacity: showModal ? 1 : 0,\r\n        transform: showModal ? `translateY(0%)` : `translateY(-100%`,\r\n        position:\"fixed\",\r\n        top:0,\r\n    })\r\n\r\n\r\n    const closeModal= e => {\r\n        if(modalRef.current === e.target){\r\n            setShowModal(false)\r\n        }\r\n    }\r\n\r\n    const keyPress = useCallback(\r\n        e => {\r\n            if (e.key === 'Escape' && showModal) {\r\n                setShowModal(false);\r\n            }\r\n        },\r\n        [setShowModal, showModal]\r\n    )\r\n\r\n    const handleExpenseSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            RoomsService.addRoomExpense(expenseName, expenseValue, roomId).then(\r\n                () => {\r\n                    // props.history.push(\"/profile\");\r\n                    window.location.reload();\r\n                },\r\n                (error) => {\r\n                    const resMessage =\r\n                        (error.response &&\r\n                            error.response.data &&\r\n                            error.response.data.message) ||\r\n                        error.message ||\r\n                        error.toString();\r\n\r\n                    setLoading(false);\r\n                    setMessage(resMessage);\r\n                }\r\n            );\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(\r\n        () => {\r\n            document.addEventListener('keydown', keyPress);\r\n            return () => document.removeEventListener('keydown', keyPress);\r\n        },\r\n        [keyPress]\r\n    );\r\n\r\n    return(\r\n        <>\r\n            {showModal ? (\r\n                <Background ref={modalRef} onClick={closeModal}>\r\n                    <animated.div style={animation}>\r\n                        <ModalWrapper showModal={showModal}>\r\n                            {/*<ModalImg src={require('../public/modal.jpg')}*/}\r\n                            {/*          alt='image'/>*/}\r\n                            <ModalContent>\r\n                                <p>ADD EXPENSE</p>\r\n\r\n                                <Form onSubmit={handleExpenseSubmit} ref={form}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"expenseName\">Expense name</label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"expenseName\"\r\n                                            value={expenseName}\r\n                                            onChange={onChangeExpenseName}\r\n                                            // validations={[required]}\r\n                                        />\r\n                                        <label htmlFor=\"expenseValue\">Expense value</label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"expenseValue\"\r\n                                            value={expenseValue}\r\n                                            onChange={onChangeExpenseValue}\r\n                                            // validations={[required]}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n                                            {loading && (\r\n                                                <span className=\"spinner-border spinner-border-sm\"/>\r\n                                            )}\r\n                                            <span>Add expense</span>\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                    {message && (\r\n                                        <div className=\"form-group\">\r\n                                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                                {message}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                                </Form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            </ModalContent>\r\n                            <CloseModalButton aria-label='Close modal' onClick={() => setShowModal(prev => !prev)}/>\r\n                        </ModalWrapper>\r\n                    </animated.div>\r\n                </Background>\r\n            ) : null}\r\n        </>\r\n    )\r\n}","D:\\splir\\splir-client\\src\\components\\RoomAddUserModal.js",["177","178"],"import React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {animated, useSpring} from 'react-spring'\r\nimport styled from 'styled-components'\r\nimport {MdClose} from \"react-icons/all\";\r\nimport Input from \"react-validation/build/input\";\r\nimport Form from \"react-validation/build/form\";\r\n\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport RoomsService from \"../services/rooms-service\"\r\n\r\nconst Background = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0,0 0, 0.8);\r\n    position: fixed;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 1;\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n    width: 300px;\r\n    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\r\n    background: #fff;\r\n    color: #000;\r\n    z-index: 1;\r\n    border-radius: 10px;\r\n`\r\n\r\n\r\n\r\nconst ModalImg = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 10px 0 0 10px;\r\n    background: #000;\r\n    z-index: 1;\r\n\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  line-height: 1.8;\r\n  z-index: 1;\r\n  color: #141414;\r\n  p {\r\n    margin-bottom: 1rem;\r\n  }\r\n  label{\r\n      width: 100%;\r\n    text-align: center;\r\n  }\r\n  button {\r\n    padding: 10px 24px;\r\n    background: #141414;\r\n    color: #fff;\r\n    border: none;\r\n  }\r\n`;\r\nconst Form1 = styled(Form)`\r\n    width:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst label = styled.label`\r\n    width: 100%;\r\n    text-align: center;\r\n`\r\n\r\n\r\nconst CloseModalButton = styled(MdClose)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 1;\r\n`;\r\n\r\n\r\n\r\nexport const RoomAddUserModal = ({showModal, setShowModal, roomId}) =>{\r\n    const modalRef = useRef()\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeUserId = (e) => {\r\n        const userId = e.target.value;\r\n        setUserId(userId);\r\n    };\r\n\r\n    const animation = useSpring({\r\n        config:{\r\n            duration:250\r\n        },\r\n        opacity: showModal ? 1 : 0,\r\n        transform: showModal ? `translateY(0%)` : `translateY(-100%`,\r\n        position:\"fixed\",\r\n        top:0,\r\n    })\r\n\r\n\r\n    const closeModal= e => {\r\n        if(modalRef.current === e.target){\r\n            setShowModal(false)\r\n        }\r\n    }\r\n\r\n    const keyPress = useCallback(\r\n        e => {\r\n            if (e.key === 'Escape' && showModal) {\r\n                setShowModal(false);\r\n            }\r\n        },\r\n        [setShowModal, showModal]\r\n    )\r\n\r\n    const handleAddUserSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            RoomsService.addUserToRoom(userId, roomId).then(\r\n                () => {\r\n                    // props.history.push(\"/profile\");\r\n                    window.location.reload();\r\n                },\r\n                (error) => {\r\n                    const resMessage =\r\n                        (error.response &&\r\n                            error.response.data &&\r\n                            error.response.data.message) ||\r\n                        error.message ||\r\n                        error.toString();\r\n\r\n                    setLoading(false);\r\n                    setMessage(resMessage);\r\n                }\r\n            );\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(\r\n        () => {\r\n            document.addEventListener('keydown', keyPress);\r\n            return () => document.removeEventListener('keydown', keyPress);\r\n        },\r\n        [keyPress]\r\n    );\r\n\r\n    return(\r\n        <>\r\n            {showModal ? (\r\n                <Background ref={modalRef} onClick={closeModal}>\r\n                    <animated.div style={animation}>\r\n                        <ModalWrapper showModal={showModal}>\r\n                            {/*<ModalImg src={require('../public/modal.jpg')}*/}\r\n                            {/*          alt='image'/>*/}\r\n                            <ModalContent>\r\n                                <p>ADD USER TO ROOM</p>\r\n\r\n                                <Form onSubmit={handleAddUserSubmit} ref={form}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"userId\">Username</label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"userId\"\r\n                                            value={userId}\r\n                                            onChange={onChangeUserId}\r\n                                            // validations={[required]}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n                                            {loading && (\r\n                                                <span className=\"spinner-border spinner-border-sm\"/>\r\n                                            )}\r\n                                            <span>Send invite</span>\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                    {message && (\r\n                                        <div className=\"form-group\">\r\n                                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                                {message}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                                </Form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            </ModalContent>\r\n                            <CloseModalButton aria-label='Close modal' onClick={() => setShowModal(prev => !prev)}/>\r\n                        </ModalWrapper>\r\n                    </animated.div>\r\n                </Background>\r\n            ) : null}\r\n        </>\r\n    )\r\n}","D:\\splir\\splir-client\\src\\components\\CreateRoomModal.js",["179","180"],"D:\\splir\\splir-client\\src\\components\\Notifications.js",[],"D:\\splir\\splir-client\\src\\services\\notifications-service.js",["181"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/notifications/\";\r\n\r\nconst getNotifications = () => {\r\n    return axios.get(API_URL + \"getnotifications\", { headers: authHeader() });\r\n};\r\n\r\nconst getSentNotifications = () => {\r\n    return axios.get(API_URL + \"getsentnotifications\", { headers: authHeader() });\r\n};\r\nconst setSeen = (notificationId) => {\r\n    return axios.post(API_URL + \"setseen\", {\r\n        id:notificationId\r\n    },{headers: authHeader()});\r\n};\r\n\r\nconst removeNotification = (notificationId) => {\r\n    return axios.post(API_URL + \"remove\", {\r\n        id:notificationId\r\n    },{headers: authHeader()});\r\n};\r\n\r\n\r\nexport default {\r\n    getNotifications,\r\n    getSentNotifications,\r\n    setSeen,\r\n    removeNotification\r\n\r\n};\r\n\r\n\r\n\r\n\r\n","D:\\splir\\splir-client\\src\\components\\NotificationsSent.js",["182","183","184","185"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport NotificationsService from \"../services/notifications-service\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\n// export default function SimpleList() {\r\n//     const classes = useStyles();}\r\n\r\nconst NotificationsSent = () => {\r\n    const [content, setContent] = useState([]);\r\n    const [buttonHelper, setButtonHelper] = useState(false);\r\n\r\n    useEffect(() => {\r\n        NotificationsService.getSentNotifications().then(\r\n            (response) => {\r\n                setContent(response.data);\r\n            },\r\n            (error) => {\r\n                const _content =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                setContent(_content);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    const handleGetUserDetails = (id) => {\r\n        setContent(content.filter(obj=>obj.id!==id))\r\n    };\r\n\r\n\r\nreturn (\r\n    <div >\r\n        {content.map((con)=>(\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    // expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <Typography >\r\n                        Debtor: {con.debtorUsername}\r\n                    </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <Typography>\r\n\r\n                        {con.message.split('need')[0]}\r\n\r\n                        {con.seen!==false ?\r\n                    <button onClick={()=>{NotificationsService.removeNotification(con.id);handleGetUserDetails(con.id)}}>I received</button>:null}\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        ))}\r\n    </div>\r\n);\r\n};\r\nexport default NotificationsSent;","D:\\splir\\splir-client\\src\\components\\NotificationsReceived.js",["186","187","188","189","190"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nimport UserService from \"../services/user-service\";\r\nimport NotificationsService from \"../services/notifications-service\";\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\n// export default function SimpleList() {\r\n//     const classes = useStyles();}\r\n\r\n\r\nconst NotificationsReceived = () => {\r\n    const [content, setContent] = useState([]);\r\n    const [buttonHelper, setButtonHelper] = useState(false);\r\n    const [details, setDetails] = useState([]);\r\n\r\n    const getDetail = async (id) => {\r\n        const response =  await UserService.getPaymentDetails(id)\r\n        return response.data;\r\n    };\r\n\r\n    const getDetailsAsync = async (list) => {\r\n        return Promise.all(\r\n            list.map(obj => {\r\n                const { senderId } = obj;\r\n                return getDetail(senderId)\r\n            })\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        NotificationsService.getNotifications().then(\r\n            (response) => {\r\n                setContent(response.data);\r\n                getDetailsAsync(response.data).then(details => {\r\n                    setDetails(details)});\r\n            },\r\n            (error) => {\r\n                const _content =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message)\r\n                error.message ||\r\n                error.toString();\r\n\r\n                setContent(_content);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n\r\n    const handleGetUserDetails = (id) => {\r\n        setContent(content.filter(obj=>obj.id!==id))\r\n    };\r\n\r\n\r\n    return (\r\n        <div >\r\n            {content.map((con, index)=>(\r\n                con.seen!==true ?\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    // expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    <Typography >\r\n                        {con.message}\r\n                    </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <Typography>\r\n\r\n                        {details.length &&\r\n                           \"BLIK phone number:\"+ details[index].phoneNumber+ \" Bank account number: \" + details[index].accountNumber+\" \"\r\n                        }\r\n\r\n\r\n                        <button onClick={()=>{NotificationsService.setSeen(con.id);handleGetUserDetails(con.id)}}>I returned</button>\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n                    :null\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotificationsReceived;","D:\\splir\\splir-client\\src\\services\\solo-service.js",["191"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/solo/\";\r\n\r\nconst getExpenses = () => {\r\n    return axios.get(API_URL + \"getexpenses\", { headers: authHeader() });\r\n};\r\n\r\nconst addExpense = (expenseName, expenseValue, localDate, isCyclic) =>{\r\n    return axios.post(API_URL + \"addexpense\", {\r\n        expenseName,\r\n        expenseValue,\r\n        localDate,\r\n        isCyclic\r\n    },{headers: authHeader()});\r\n};\r\n\r\nexport default {\r\n    getExpenses,\r\n    addExpense,\r\n\r\n};","D:\\splir\\splir-client\\src\\components\\SoloExpenseModal.js",["192"],"import React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {animated, useSpring} from 'react-spring'\r\nimport styled from 'styled-components'\r\nimport {MdClose} from \"react-icons/all\";\r\nimport Input from \"react-validation/build/input\";\r\nimport Form from \"react-validation/build/form\";\r\n\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport SoloService from \"../services/solo-service\"\r\n\r\nconst Background = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0,0 0, 0.8);\r\n    position: fixed;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 1;\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n    width: 300px;\r\n    box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\r\n    background: #fff;\r\n    color: #000;\r\n    z-index: 1;\r\n    border-radius: 10px;\r\n`\r\n\r\n\r\n\r\nconst ModalImg = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 10px 0 0 10px;\r\n    background: #000;\r\n    z-index: 1;\r\n\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  line-height: 1.8;\r\n  z-index: 1;\r\n  color: #141414;\r\n  p {\r\n    margin-bottom: 1rem;\r\n  }\r\n  label{\r\n      width: 100%;\r\n    text-align: center;\r\n  }\r\n  button {\r\n    padding: 10px 24px;\r\n    background: #141414;\r\n    color: #fff;\r\n    border: none;\r\n  }\r\n`;\r\nconst Form1 = styled(Form)`\r\n    width:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst label = styled.label`\r\n    width: 100%;\r\n    text-align: center;\r\n`\r\n\r\n\r\nconst CloseModalButton = styled(MdClose)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 1;\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport const SoloExpenseModal = ({showModal, setShowModal}) =>{\r\n    let today = new Date().toISOString().slice(0, 10)\r\n    const modalRef = useRef()\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [expenseName, setExpenseName] = useState(\"\");\r\n    const [expenseValue, setExpenseValue] = useState(\"\");\r\n    const [localDate, setLocalDate] = useState(today);\r\n    const [isCyclic, setIsCyclic] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const onChangeExpenseName = (e) => {\r\n        const expenseName = e.target.value;\r\n        setExpenseName(expenseName);\r\n    };\r\n\r\n    const onChangeExpenseValue = (e) => {\r\n        const expenseValue = e.target.value;\r\n        setExpenseValue(expenseValue);\r\n    };\r\n\r\n    const onChangeLocalDate = (e) => {\r\n        const localDate = e.target.value;\r\n        setLocalDate(localDate);\r\n    };\r\n\r\n    const onChangeIsCyclic = (e) => {\r\n        const isCyclic = e.target.checked;\r\n        setIsCyclic(isCyclic);\r\n    };\r\n\r\n\r\n    const animation = useSpring({\r\n        config:{\r\n            duration:250\r\n        },\r\n        opacity: showModal ? 1 : 0,\r\n        transform: showModal ? `translateY(0%)` : `translateY(-100%`,\r\n        position:\"fixed\",\r\n        top:0,\r\n    })\r\n\r\n\r\n    const closeModal= e => {\r\n        if(modalRef.current === e.target){\r\n            setShowModal(false)\r\n        }\r\n    }\r\n\r\n    const keyPress = useCallback(\r\n        e => {\r\n            if (e.key === 'Escape' && showModal) {\r\n                setShowModal(false);\r\n            }\r\n        },\r\n        [setShowModal, showModal]\r\n    )\r\n\r\n    const handleExpenseSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setLoading(true);\r\n\r\n        form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            SoloService.addExpense(expenseName, expenseValue, localDate, isCyclic).then(\r\n                () => {\r\n                    // props.history.push(\"/profile\");\r\n                    window.location.reload();\r\n                },\r\n                (error) => {\r\n                    const resMessage =\r\n                        (error.response &&\r\n                            error.response.data &&\r\n                            error.response.data.message) ||\r\n                        error.message ||\r\n                        error.toString();\r\n\r\n                    setLoading(false);\r\n                    setMessage(resMessage);\r\n                }\r\n            );\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(\r\n        () => {\r\n            document.addEventListener('keydown', keyPress);\r\n            return () => document.removeEventListener('keydown', keyPress);\r\n        },\r\n        [keyPress]\r\n    );\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n            {showModal ? (\r\n                <Background ref={modalRef} onClick={closeModal}>\r\n                    <animated.div style={animation}>\r\n                        <ModalWrapper showModal={showModal}>\r\n                            {/*<ModalImg src={require('../public/modal.jpg')}*/}\r\n                            {/*          alt='image'/>*/}\r\n                            <ModalContent>\r\n                                <p>ADD EXPENSE</p>\r\n\r\n                                <Form1 onSubmit={handleExpenseSubmit} ref={form}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"expenseName\">Expense name</label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"expenseName\"\r\n                                            value={expenseName}\r\n                                            onChange={onChangeExpenseName}\r\n                                            isRequired=\"true\"\r\n                                            // validations={[required]}\r\n                                        />\r\n                                        <label htmlFor=\"expenseValue\">Expense value</label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"expenseValue\"\r\n                                            value={expenseValue}\r\n                                            onChange={onChangeExpenseValue}\r\n                                            // validations={[required]}\r\n                                        />\r\n                                        <label htmlFor=\"localDate\">Date</label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"localDate\"\r\n                                            value={localDate}\r\n                                            onChange={onChangeLocalDate}\r\n                                            // validations={[required]}\r\n                                            disabled\r\n                                        />\r\n                                        <label htmlFor=\"isCyclic\">Is it cyclic?</label>\r\n                                        <Input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control\"\r\n                                            name=\"isCyclic\"\r\n                                            value={isCyclic}\r\n                                            onChange={onChangeIsCyclic}\r\n                                            // validations={[required]}\r\n                                        />\r\n\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <button className=\"btn btn-primary btn-block\" disabled={loading}>\r\n                                            {loading && (\r\n                                                <span className=\"spinner-border spinner-border-sm\"/>\r\n                                            )}\r\n                                            <span>Add expense</span>\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                    {message && (\r\n                                        <div className=\"form-group\">\r\n                                            <div className=\"alert alert-danger\" role=\"alert\">\r\n                                                {message}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                                </Form1>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            </ModalContent>\r\n                            <CloseModalButton aria-label='Close modal' onClick={() => setShowModal(prev => !prev)}/>\r\n                        </ModalWrapper>\r\n                    </animated.div>\r\n                </Background>\r\n            ) : null}\r\n        </>\r\n    )\r\n}",{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":35,"column":11,"nodeType":"199","messageId":"200","endLine":35,"endColumn":20},{"ruleId":"197","severity":1,"message":"201","line":10,"column":11,"nodeType":"199","messageId":"200","endLine":10,"endColumn":16},{"ruleId":"197","severity":1,"message":"202","line":10,"column":17,"nodeType":"199","messageId":"200","endLine":10,"endColumn":25},{"ruleId":"203","severity":1,"message":"204","line":25,"column":8,"nodeType":"205","endLine":25,"endColumn":10,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":40,"column":1,"nodeType":"209","endLine":45,"endColumn":3},{"ruleId":"207","severity":1,"message":"208","line":43,"column":1,"nodeType":"209","endLine":51,"endColumn":3},{"ruleId":"207","severity":1,"message":"208","line":35,"column":1,"nodeType":"209","endLine":42,"endColumn":3},{"ruleId":"197","severity":1,"message":"210","line":33,"column":7,"nodeType":"199","messageId":"200","endLine":33,"endColumn":15},{"ruleId":"197","severity":1,"message":"211","line":64,"column":7,"nodeType":"199","messageId":"200","endLine":64,"endColumn":12},{"ruleId":"197","severity":1,"message":"212","line":14,"column":7,"nodeType":"199","messageId":"200","endLine":14,"endColumn":16},{"ruleId":"197","severity":1,"message":"213","line":22,"column":10,"nodeType":"199","messageId":"200","endLine":22,"endColumn":22},{"ruleId":"197","severity":1,"message":"214","line":32,"column":12,"nodeType":"199","messageId":"200","endLine":32,"endColumn":19},{"ruleId":"197","severity":1,"message":"215","line":32,"column":21,"nodeType":"199","messageId":"200","endLine":32,"endColumn":31},{"ruleId":"197","severity":1,"message":"216","line":34,"column":11,"nodeType":"199","messageId":"200","endLine":34,"endColumn":25},{"ruleId":"197","severity":1,"message":"217","line":23,"column":7,"nodeType":"199","messageId":"200","endLine":23,"endColumn":19},{"ruleId":"207","severity":1,"message":"208","line":62,"column":1,"nodeType":"209","endLine":71,"endColumn":3},{"ruleId":"197","severity":1,"message":"218","line":10,"column":9,"nodeType":"199","messageId":"200","endLine":10,"endColumn":13},{"ruleId":"197","severity":1,"message":"212","line":15,"column":7,"nodeType":"199","messageId":"200","endLine":15,"endColumn":16},{"ruleId":"197","severity":1,"message":"219","line":23,"column":7,"nodeType":"199","messageId":"200","endLine":23,"endColumn":21},{"ruleId":"197","severity":1,"message":"220","line":27,"column":10,"nodeType":"199","messageId":"200","endLine":27,"endColumn":11},{"ruleId":"197","severity":1,"message":"213","line":32,"column":10,"nodeType":"199","messageId":"200","endLine":32,"endColumn":22},{"ruleId":"197","severity":1,"message":"221","line":47,"column":12,"nodeType":"199","messageId":"200","endLine":47,"endColumn":24},{"ruleId":"197","severity":1,"message":"222","line":47,"column":26,"nodeType":"199","messageId":"200","endLine":47,"endColumn":41},{"ruleId":"203","severity":1,"message":"223","line":125,"column":8,"nodeType":"205","endLine":125,"endColumn":10,"suggestions":"224"},{"ruleId":"197","severity":1,"message":"212","line":11,"column":7,"nodeType":"199","messageId":"200","endLine":11,"endColumn":16},{"ruleId":"197","severity":1,"message":"213","line":19,"column":10,"nodeType":"199","messageId":"200","endLine":19,"endColumn":22},{"ruleId":"197","severity":1,"message":"217","line":16,"column":7,"nodeType":"199","messageId":"200","endLine":16,"endColumn":19},{"ruleId":"207","severity":1,"message":"208","line":20,"column":1,"nodeType":"209","endLine":23,"endColumn":3},{"ruleId":"197","severity":1,"message":"212","line":12,"column":7,"nodeType":"199","messageId":"200","endLine":12,"endColumn":16},{"ruleId":"197","severity":1,"message":"213","line":20,"column":10,"nodeType":"199","messageId":"200","endLine":20,"endColumn":22},{"ruleId":"197","severity":1,"message":"225","line":28,"column":12,"nodeType":"199","messageId":"200","endLine":28,"endColumn":19},{"ruleId":"197","severity":1,"message":"226","line":28,"column":21,"nodeType":"199","messageId":"200","endLine":28,"endColumn":31},{"ruleId":"197","severity":1,"message":"210","line":33,"column":7,"nodeType":"199","messageId":"200","endLine":33,"endColumn":15},{"ruleId":"197","severity":1,"message":"210","line":33,"column":7,"nodeType":"199","messageId":"200","endLine":33,"endColumn":15},{"ruleId":"197","severity":1,"message":"211","line":64,"column":7,"nodeType":"199","messageId":"200","endLine":64,"endColumn":12},{"ruleId":"197","severity":1,"message":"210","line":32,"column":7,"nodeType":"199","messageId":"200","endLine":32,"endColumn":15},{"ruleId":"197","severity":1,"message":"211","line":63,"column":7,"nodeType":"199","messageId":"200","endLine":63,"endColumn":12},{"ruleId":"207","severity":1,"message":"208","line":26,"column":1,"nodeType":"209","endLine":32,"endColumn":3},{"ruleId":"197","severity":1,"message":"212","line":11,"column":7,"nodeType":"199","messageId":"200","endLine":11,"endColumn":16},{"ruleId":"197","severity":1,"message":"213","line":19,"column":10,"nodeType":"199","messageId":"200","endLine":19,"endColumn":22},{"ruleId":"197","severity":1,"message":"227","line":28,"column":12,"nodeType":"199","messageId":"200","endLine":28,"endColumn":24},{"ruleId":"197","severity":1,"message":"228","line":28,"column":26,"nodeType":"199","messageId":"200","endLine":28,"endColumn":41},{"ruleId":"197","severity":1,"message":"212","line":13,"column":7,"nodeType":"199","messageId":"200","endLine":13,"endColumn":16},{"ruleId":"197","severity":1,"message":"213","line":27,"column":10,"nodeType":"199","messageId":"200","endLine":27,"endColumn":22},{"ruleId":"197","severity":1,"message":"227","line":37,"column":12,"nodeType":"199","messageId":"200","endLine":37,"endColumn":24},{"ruleId":"197","severity":1,"message":"228","line":37,"column":26,"nodeType":"199","messageId":"200","endLine":37,"endColumn":41},{"ruleId":"203","severity":1,"message":"229","line":72,"column":8,"nodeType":"205","endLine":72,"endColumn":10,"suggestions":"230"},{"ruleId":"207","severity":1,"message":"208","line":19,"column":1,"nodeType":"209","endLine":23,"endColumn":3},{"ruleId":"197","severity":1,"message":"210","line":33,"column":7,"nodeType":"199","messageId":"200","endLine":33,"endColumn":15},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"no-unused-vars","'Container' is assigned a value but never used.","Identifier","unusedVar","'userr' is assigned a value but never used.","'setUserr' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'content'. Either include it or remove the dependency array.","ArrayExpression",["233"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ModalImg' is assigned a value but never used.","'Form1' is assigned a value but never used.","'useStyles' is assigned a value but never used.","'ListItemLink' is defined but never used.","'details' is assigned a value but never used.","'setDetails' is assigned a value but never used.","'getUserDetails' is assigned a value but never used.","'getUserBoard' is assigned a value but never used.","'User' is defined but never used.","'getCurrentUser' is assigned a value but never used.","'f' is defined but never used.","'totalExpense' is assigned a value but never used.","'setTotalExpense' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser' and 'props.location.state.con'. Either include them or remove the dependency array. If 'setContent' needs the current value of 'props.location.state.con', you can also switch to useReducer instead of useState and read 'props.location.state.con' in the reducer.",["234"],"'content' is assigned a value but never used.","'setContent' is assigned a value but never used.","'buttonHelper' is assigned a value but never used.","'setButtonHelper' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDetailsAsync'. Either include it or remove the dependency array.",["235"],"no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [content]",{"range":"242","text":"243"},"Update the dependencies array to be: [currentUser, props.location.state.con]",{"range":"244","text":"245"},"Update the dependencies array to be: [getDetailsAsync]",{"range":"246","text":"247"},[728,730],"[content]",[4006,4008],"[currentUser, props.location.state.con]",[2229,2231],"[getDetailsAsync]"]